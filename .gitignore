# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
media/
staticfiles/

# Django settings files (CRITICAL - contains secret keys and passwords)
*/settings.py
settings.py
**/settings.py
depot_scan/settings.py

# Per-environment settings
*/settings/base.py
*/settings/development.py
*/settings/production.py
*/settings/staging.py
*/settings/local.py
*/settings/__init__.py

# Django migrations (optional, uncomment if needed)
# */migrations/*.py
# !*/migrations/__init__.py

# Django collected static (if using `collectstatic`)
static_root/
static_collected/

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Virtual environment markers
pyvenv.cfg

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
.idea/

# VSCode
.vscode/
*.code-workspace

## CRITICAL - Environment and security files
# Environment variables
*.env
.env
.env.*
!.env.example

# Credentials and secrets
secret_key*
*secret*
*password*
*credential*
*token*
*key*
*auth*
.pypirc

# Django specific security files
local_settings.py
settings_local.py
settings_*.py
*_settings.py
*/settings/local.py
*/settings/production.py
*/settings/staging.py
*/config/settings/local.py
*/config/settings/production.py

# Django specific development files and OS files
.DS_Store
*.bak
*.swp
*~
._*
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/
*.stackdump
*.lnk
.directory
.Trash-*
.nfs*
.fuse_hidden*
.fseventsd
.TemporaryItems
.apdisk
.project
.classpath
.factorypath
.settings/
.externalToolBuilders/
.buildpath

# AWS credentials
.aws/

# Docker
.docker/
docker-compose.override.yml

# Development certificates
*.crt
*.key
*.pem

# Cache directories
.sass-cache/
.npm/
.eslintcache
__pycache__/
*.pyc
.pytest_cache/
node_modules/
npm-debug.log
yarn-debug.log
yarn-error.log
.parcel-cache/
.cache/
.webpack/
.babel-cache/

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Backend API credentials/keys
*api_key*
*apikey*
*.pem
*.key
*.crt
*.cer
*.der
*.p8
*.p12
*.pfx
*.keystore
*.jks
*credentials*
*secret*
*token*
*oauth*
*password*
*.htpasswd
*.htaccess
*.netrc
*_rsa
*id_dsa
*id_ecdsa
*id_ed25519
ssh_config
known_hosts
authorized_keys
*.gpg
*.pgp
*.asc
*.kbx
*.pub
api_keys*.py
*credentials*.json
*secrets*.json
*token*.json
*oauth*.json
*.ini
config.json
settings.json

# Django Rest Framework
drf_api_logs/

# Django debug files and crash reports
debug.log
django-debug.log
django-crash-*.log
crash-*.log
error-*.log
debug-*.log

# Database dumps/backups
*.dump
*.sql
*.sqlite
*.sqlite3-*
*.db
*.bak
*backup*
*dump*
*.gz
*.zip
*.tar
*.tar.gz
*.tgz
*.rar

# Temporary files that might contain sensitive data
tmp/
temp/
.tmp/
.temp/

# Test coverage reports
coverage/
.coverage*
coverage.xml
coverage.json
coverage-report/
junit.xml

# Sensitive documentation
README.secret.md
SECRETS.md
CREDENTIALS.md
docs/private/
docs/secrets/
docs/credentials/